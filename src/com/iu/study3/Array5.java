package com.iu.study3;

import java.util.Arrays;
import java.util.Random;

public class Array5 {

	public static void main(String[] args) {
		
		Random random = new Random();
		
		// 정수 int를 모을 배열 6칸 선언
		int [] nums = new int[6];
		
		// 변수 nums에 들어있는 값을 출력하여라. 
		System.out.println(Arrays.toString(nums)); //object[]
		
//		random.nextInt(10+1); //1~9까지 출력 
//		random.nextInt(10); //0~9까지 출력
		
		
		for(int i=0; i<nums.length;i++) {
			
			//nums[i]=random.nextInt(45); 0부터 45까지 출력
			// nums의 인덱스에 무작위로(랜덤으로) 1부터 46까지 6개를 뽑겠다. 
			nums[i]=random.nextInt(45)+1;
			
			/* 같은 데이터가 중복으로 출력됨 => 중복제거해야 함.
			 * 하나를 뽑은 다음에 인덱스와 중복이 되는지 비교하여 검증해야 함.
			   첫번째 비교값이 없어서 비교 안함 (i=0일 때 비교안함)
			   두번째 인덱스일 경우, 첫번째 인덱스와 비교해야 함. (i=1일 때 0번과 비교)
			   세번째 인덱스일 경우, 첫번째와 두번째 인덱스와 비교해야 함. (i=2 이면 0,1번과 비교)
			   (i=3 이면 0,1,2와 비교함)
			   ... 여섯번째 인덱스일 경우, 첫번째부터 다섯번째까지의 인덱스와 비교해야 함.
			*/
			// 중복이 되는지 검사하는 반복문
			for(int j=0; j<i;j++) {
				//중복 비교 (중복확인) 코드 : 같은 배열에 있는 j번째와 비교한다.
				if(nums[i]==nums[j]) {
					i--;   // i값이 중복이 된 경우 (중복값끼리 비교함)
					
/*					i--; 대신에 아래 코드를 사용하여도 된다. 
 					nums[i]=random.nextInt(45)+1;
					j--;  // j가 1씩 감소하는 이유는 인덱스 0을 비교했을 때 두개의 값이 중복된 경우, 
							 중복된 값을 제외하고 하나만 뽑은 후 j의 인덱스 값을 내려서 반복문을 다시 실행시키기 위함.
*/					
				}
//				System.out.println(i);
			}
			
		}
		
		/* 배열에서 정렬(Order by) 해보자.
		 * 무작위로 6개로 뽑혀 나온 랜덤값들을 작은 순으로 정렬하여 출력하여라.  
		 * 첫번째 인덱스에 있는 값과 두번째 인덱스에 있는 값과 비교해본다.
		 * 첫번째 인덱스에 있는 값과 세번째 인덱스에 있는 값과 비교해본다.
		   => 세번째 인덱스가 첫번째 인덱스보다 작으면 자리바꿈.
		   여기에서 그치지않고 첫번째 인덱스와 네번째 인덱스와 비교한다.
		 * 두번째 인덱스도 첫번째 인덱스 비교할 때처럼 그 다음 인덱스부터 차례로 비교한다.
		 ** 배열의 장점 : 접근 속도가 빠르다 = 쉽게 꺼내 쓸 수 있다. (DB에서 배열을 가져올 때 정렬해서 꺼내쓴다.) 
		 ** 배열의 단점 : 한번 선언된 배열의 크기는 변경이 불가능하다. 
		 * 5개의 배열 : 3  7  1  6  9 가 있다.
		 * 첫번째인 경우 : 0번 인덱스와 1,2,3,4,5번 인덱스와 비교함
		 * 두번째인 경우 : 1번 인덱스와 2,3,4,5번 인덱스와 비교함
		 * 세번째인 경우 : 2번 인덱스와 3,4,5번 인덱스와 비교함
		 * 네번째인 경우 : 3번 인덱스와 4,5번 인덱스와 비교함
		 * 5번째인 경우 : 4번 인덱스와 5번 인덱스와 비교함 
		 * 6번째인 경우 비교할 인덱스가 없으므로 총 5번 비교를 반복한다.
		*/
		
		for(int i=0;i<5;i++) {
			// j=비교해야 할 첫번째 인덱스 번호 
			for(int j=i+1;j<6;j++) {
				if(nums[i]>nums[j]) {
					// nums의 i번째를 꺼내 임시 변수에 집어넣음.
					int tmp = nums[i];
					nums[i]=nums[j];
					nums[j]=tmp;
				}
			}
		}	
		
		for(int i=0; i<nums.length;i++) {
			System.out.println(nums[i]);
		}
		
		
		

	}

}
